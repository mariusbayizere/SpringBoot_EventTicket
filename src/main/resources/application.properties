
# # Application Configuration
# spring.application.name=BookingEventTicket

# # Database Configuration (credentials from environment variables)
# spring.datasource.url=jdbc:postgresql://localhost:5432/booking_event_db
# spring.datasource.username=${DB_USERNAME:postgres}
# spring.datasource.password=${DB_PASSWORD}
# spring.datasource.driver-class-name=org.postgresql.Driver

# # JPA/Hibernate Configuration
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.properties.hibernate.format_sql=true

# # Mail Configuration
# spring.mail.host=smtp.gmail.com
# spring.mail.port=587
# spring.mail.username=${MAIL_USERNAME}
# spring.mail.password=${MAIL_PASSWORD}
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.starttls.required=true
# spring.mail.properties.mail.smtp.connectiontimeout=5000
# spring.mail.properties.mail.smtp.timeout=5000
# spring.mail.properties.mail.smtp.writetimeout=5000

# # Google OAuth2 Configuration
# spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
# spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.scope=profile,email
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# # OAuth2 Provider Configuration
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
# spring.security.oauth2.client.provider.google.user-name-attribute=sub

# # Server Configuration
# server.port=${SERVER_PORT:8080}
# server.error.include-message=always
# server.error.include-binding-errors=always

# # Logging Configuration
# logging.level.root=INFO
# logging.level.com.example.BookingEventTicket=DEBUG
# logging.level.org.springframework.security=DEBUG
# logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# # Swagger/OpenAPI Configuration
# springdoc.api-docs.path=/v3/api-docs
# springdoc.swagger-ui.path=/swagger-ui.html
# springdoc.swagger-ui.enabled=true
# springdoc.swagger-ui.operationsSorter=method
# springdoc.swagger-ui.tagsSorter=alpha
# springdoc.swagger-ui.tryItOutEnabled=true
# springdoc.show-actuator=false


# spring.cache.type=caffeine
# spring.cache.caffeine.spec=maximumSize=100,expireAfterWrite=10m


# Application Configuration
spring.application.name=BookingEventTicket

# Database Configuration (credentials from environment variables)
spring.datasource.url=jdbc:postgresql://localhost:5432/booking_event_db
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Mail Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Server Configuration
server.port=${SERVER_PORT:8080}
server.error.include-message=always
server.error.include-binding-errors=always

# Logging Configuration
logging.level.root=INFO
logging.level.com.example.BookingEventTicket=DEBUG
logging.level.org.springframework.security=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Swagger/OpenAPI Configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.show-actuator=false

# Cache Configuration
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=100,expireAfterWrite=10m